#!/usr/bin/env python3
# -*- coding: ISO-8859-1 -*-
#
# generated by wxGlade 0.8.0 on Wed Sep 18 13:16:14 2019
#

import time, wx, DH_Funktionen, wx.lib.dialogs, re, lesen, os, shutil
from Pointliste import Pointliste
from MultiPointliste import MultiPointliste
import wx.lib.agw.pyprogress as PP

Point_ID_Spalte = -1
akt_Zeile = -1
aktPoint = 0
markiert = ""
markiert_Typ = ""
markiert_einzeln = ""
Verbindung_editiert = 0
entfernte_Zeilen = list()
Inhalte = list()
Stunden = list()
Point_ID = 0
Eltern_ID = 0
step = ""
Mittelwerte = ""
desktop=""
doc=""
sheet=""

DH_Funktionen.Verbindungen_einlesen()

# begin wxGlade: dependencies
import wx.grid
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

class Hauptrahmen(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Hauptrahmen.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((961, 590))
        self.SetTitle("DH SMT")

        self.Hauptrahmen_statusbar = self.CreateStatusBar(1)
        self.Hauptrahmen_statusbar.SetStatusWidths([-1])
        # statusbar fields
        Hauptrahmen_statusbar_fields = ["nicht verbunden"]
        for i in range(len(Hauptrahmen_statusbar_fields)):
            self.Hauptrahmen_statusbar.SetStatusText(Hauptrahmen_statusbar_fields[i], i)

        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)

        self.notebook_1 = wx.Notebook(self, wx.ID_ANY)
        sizer_6.Add(self.notebook_1, 1, wx.EXPAND, 0)

        self.Verbindungen = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.Verbindungen, "Verbindungen")

        grid_sizer_3 = wx.FlexGridSizer(2, 3, 0, 10)

        grid_sizer_3.Add((0, 0), 0, 0, 0)

        grid_sizer_3.Add((0, 0), 0, 0, 0)

        grid_sizer_3.Add((0, 0), 0, 0, 0)

        grid_sizer_3.Add((0, 0), 0, 0, 0)

        self.Verbindungsliste = wx.ListCtrl(self.Verbindungen, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_REPORT | wx.LC_SINGLE_SEL | wx.LC_VRULES)
        self.Verbindungsliste.SetMinSize((290, -1))
        self.Verbindungsliste.AppendColumn("Server", format=wx.LIST_FORMAT_LEFT, width=400)
        grid_sizer_3.Add(self.Verbindungsliste, 1, wx.EXPAND, 0)

        sizer_5 = wx.FlexGridSizer(8, 2, 10, 7)
        grid_sizer_3.Add(sizer_5, 1, wx.EXPAND, 0)

        label_11 = wx.StaticText(self.Verbindungen, wx.ID_ANY, "")
        label_11.SetMinSize((46, 27))
        sizer_5.Add(label_11, 0, 0, 0)

        label_10 = wx.StaticText(self.Verbindungen, wx.ID_ANY, "")
        label_10.SetMinSize((46, 27))
        sizer_5.Add(label_10, 0, 0, 0)

        label_13 = wx.StaticText(self.Verbindungen, wx.ID_ANY, "Datenverzeichnis")
        label_13.SetMinSize((103, 17))
        sizer_5.Add(label_13, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)

        self.Verb_Feld_Datenverz = wx.TextCtrl(self.Verbindungen, wx.ID_ANY, "")
        self.Verb_Feld_Datenverz.SetMinSize((290, 24))
        sizer_5.Add(self.Verb_Feld_Datenverz, 0, wx.ALIGN_BOTTOM | wx.ALL | wx.EXPAND, 0)

        label_5 = wx.StaticText(self.Verbindungen, wx.ID_ANY, "Server", style=wx.ALIGN_LEFT)
        label_5.SetMinSize((39, 17))
        sizer_5.Add(label_5, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT, 0)

        self.Verb_Feld_Server = wx.TextCtrl(self.Verbindungen, wx.ID_ANY, "")
        self.Verb_Feld_Server.SetMinSize((290, 24))
        sizer_5.Add(self.Verb_Feld_Server, 0, wx.ALIGN_BOTTOM | wx.ALL | wx.EXPAND, 0)

        label_6 = wx.StaticText(self.Verbindungen, wx.ID_ANY, "Database", style=wx.ALIGN_LEFT)
        sizer_5.Add(label_6, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT, 0)

        self.Verb_Feld_Db = wx.TextCtrl(self.Verbindungen, wx.ID_ANY, "")
        self.Verb_Feld_Db.SetMinSize((290, 24))
        sizer_5.Add(self.Verb_Feld_Db, 0, wx.ALIGN_BOTTOM | wx.ALL | wx.EXPAND, 0)

        label_7 = wx.StaticText(self.Verbindungen, wx.ID_ANY, "User", style=wx.ALIGN_LEFT)
        sizer_5.Add(label_7, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT, 0)

        self.Verb_Feld_Benutzer = wx.TextCtrl(self.Verbindungen, wx.ID_ANY, "")
        self.Verb_Feld_Benutzer.SetMinSize((290, 24))
        sizer_5.Add(self.Verb_Feld_Benutzer, 0, wx.ALIGN_BOTTOM | wx.ALL | wx.EXPAND, 0)

        label_8 = wx.StaticText(self.Verbindungen, wx.ID_ANY, "Password", style=wx.ALIGN_LEFT)
        sizer_5.Add(label_8, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT, 0)

        self.Verb_Feld_Passwort = wx.TextCtrl(self.Verbindungen, wx.ID_ANY, "", style=wx.TE_PASSWORD)
        self.Verb_Feld_Passwort.SetMinSize((290, 24))
        sizer_5.Add(self.Verb_Feld_Passwort, 0, wx.ALIGN_BOTTOM | wx.ALL | wx.EXPAND, 0)

        label_9 = wx.StaticText(self.Verbindungen, wx.ID_ANY, "default", style=wx.ALIGN_LEFT)
        sizer_5.Add(label_9, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT, 0)

        self.Verb_Feld_default = wx.CheckBox(self.Verbindungen, wx.ID_ANY, "")
        sizer_5.Add(self.Verb_Feld_default, 0, 0, 0)

        sizer_5.Add((0, 0), 0, 0, 0)

        grid_sizer_5 = wx.GridSizer(0, 2, 10, 10)
        sizer_5.Add(grid_sizer_5, 1, wx.EXPAND, 0)

        self.verbinden = wx.Button(self.Verbindungen, wx.ID_ANY, "verbinden")
        grid_sizer_5.Add(self.verbinden, 0, 0, 0)

        self.Verbindung_neu = wx.Button(self.Verbindungen, wx.ID_ANY, "neue Verbindung")
        self.Verbindung_neu.SetMinSize((137, 33))
        grid_sizer_5.Add(self.Verbindung_neu, 0, 0, 0)

        self.Verbindung_speichern = wx.Button(self.Verbindungen, wx.ID_ANY, "speichern")
        grid_sizer_5.Add(self.Verbindung_speichern, 0, 0, 0)

        self.Verbindung_loeschen = wx.Button(self.Verbindungen, wx.ID_ANY, u"Verbindung löschen")
        grid_sizer_5.Add(self.Verbindung_loeschen, 0, 0, 0)

        self.Archiveditor = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.Archiveditor, "Archiveditor")

        sizer_1 = wx.FlexGridSizer(3, 1, 0, 0)

        sizer_1.Add((20, 10), 0, 0, 0)

        grid_sizer_2 = wx.GridBagSizer(0, 0)
        sizer_1.Add(grid_sizer_2, 1, wx.EXPAND, 0)

        self.Werte = wx.grid.Grid(self.Archiveditor, wx.ID_ANY, size=(1, 1))
        self.Werte.CreateGrid(10, 2)
        self.Werte.SetRowLabelSize(40)
        self.Werte.SetSelectionMode(wx.grid.Grid.SelectRows)
        self.Werte.SetColLabelValue(0, "Timestamp")
        self.Werte.SetColLabelValue(1, "Value")
        self.Werte.SetRowLabelValue(0, "0")
        self.Werte.SetRowLabelValue(1, "1")
        self.Werte.SetRowLabelValue(2, "2")
        self.Werte.SetRowLabelValue(3, "3")
        self.Werte.SetRowLabelValue(4, "4")
        self.Werte.SetRowLabelValue(5, "5")
        self.Werte.SetRowLabelValue(6, "6")
        self.Werte.SetRowSize(6, 30)
        self.Werte.SetRowLabelValue(7, "7")
        self.Werte.SetRowLabelValue(8, "8")
        self.Werte.SetRowLabelValue(9, "9")
        self.Werte.SetMinSize((330, 300))
        grid_sizer_2.Add(self.Werte, (0, 0), (1, 1), wx.ALL, 1)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_2.Add(sizer_3, (0, 1), (1, 1), wx.EXPAND, 0)

        sizer_3.Add((20, 20), 0, 0, 0)

        sizer_3.Add((20, 20), 0, 0, 0)

        self.Zeilen_entfernen = wx.Button(self.Archiveditor, wx.ID_ANY, "markierte Zeilen entfernen")
        sizer_3.Add(self.Zeilen_entfernen, 0, 0, 0)

        sizer_3.Add((20, 20), 0, 0, 0)

        self.uebernehmen = wx.Button(self.Archiveditor, wx.ID_ANY, u"Änderungen speichern")
        sizer_3.Add(self.uebernehmen, 0, wx.EXPAND, 0)

        sizer_3.Add((20, 20), 0, 0, 0)

        self.einfuegen = wx.Button(self.Archiveditor, wx.ID_ANY, u"Zeile einfügen")
        sizer_3.Add(self.einfuegen, 0, wx.EXPAND, 0)

        grid_sizer_1 = wx.FlexGridSizer(3, 5, 4, 6)
        sizer_1.Add(grid_sizer_1, 0, 0, 0)

        label_1 = wx.StaticText(self.Archiveditor, wx.ID_ANY, "Point_ID")
        grid_sizer_1.Add(label_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.Point_ID = wx.TextCtrl(self.Archiveditor, wx.ID_ANY, "")
        self.Point_ID.SetMinSize((60, 25))
        grid_sizer_1.Add(self.Point_ID, 2, wx.ALL, 1)

        label_4 = wx.StaticText(self.Archiveditor, wx.ID_ANY, "oder Tag")
        label_4.SetMinSize((55, 17))
        grid_sizer_1.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.Suchtext = wx.TextCtrl(self.Archiveditor, wx.ID_ANY, "%")
        self.Suchtext.SetMinSize((125, 25))
        grid_sizer_1.Add(self.Suchtext, 2, wx.ALL, 1)

        self.Point_suchen = wx.Button(self.Archiveditor, wx.ID_ANY, "Point suchen")
        self.Point_suchen.SetMinSize((100, 25))
        grid_sizer_1.Add(self.Point_suchen, 1, wx.ALL, 1)

        label_2 = wx.StaticText(self.Archiveditor, wx.ID_ANY, "von")
        grid_sizer_1.Add(label_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.von = wx.TextCtrl(self.Archiveditor, wx.ID_ANY, "")
        self.von.SetMinSize((125, 25))
        grid_sizer_1.Add(self.von, 2, wx.ALL, 1)

        label_3 = wx.StaticText(self.Archiveditor, wx.ID_ANY, "bis")
        grid_sizer_1.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.bis = wx.TextCtrl(self.Archiveditor, wx.ID_ANY, "")
        self.bis.SetMinSize((125, 25))
        grid_sizer_1.Add(self.bis, 2, wx.ALL, 1)

        grid_sizer_1.Add((0, 0), 0, 0, 0)

        Wert_von_Bez = wx.StaticText(self.Archiveditor, wx.ID_ANY, "Wert >=", style=wx.ALIGN_RIGHT)
        grid_sizer_1.Add(Wert_von_Bez, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.Wert_von = wx.TextCtrl(self.Archiveditor, wx.ID_ANY, "")
        self.Wert_von.SetMinSize((125, 25))
        grid_sizer_1.Add(self.Wert_von, 2, wx.ALL, 1)

        Wert_bis_Bez = wx.StaticText(self.Archiveditor, wx.ID_ANY, "Wert <=", style=wx.ALIGN_RIGHT)
        grid_sizer_1.Add(Wert_bis_Bez, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.Wert_bis = wx.TextCtrl(self.Archiveditor, wx.ID_ANY, "")
        self.Wert_bis.SetMinSize((125, 25))
        grid_sizer_1.Add(self.Wert_bis, 2, wx.ALL, 1)

        self.Daten_holen = wx.Button(self.Archiveditor, wx.ID_ANY, "Werte holen")
        self.Daten_holen.SetMinSize((100, 25))
        grid_sizer_1.Add(self.Daten_holen, 1, wx.ALL, 1)

        self.Rekalkulator = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.Rekalkulator, "Rekalkulator")

        sizer_7 = wx.FlexGridSizer(3, 1, 0, 0)

        sizer_7.Add((20, 10), 0, 0, 0)

        self.list_ctrl_1 = wx.ListCtrl(self.Rekalkulator, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES)
        self.list_ctrl_1.SetMinSize((500, 380))
        self.list_ctrl_1.AppendColumn("Point_ID", format=wx.LIST_FORMAT_LEFT, width=76)
        self.list_ctrl_1.AppendColumn("Tagname", format=wx.LIST_FORMAT_LEFT, width=240)
        self.list_ctrl_1.AppendColumn("Beschreibung", format=wx.LIST_FORMAT_LEFT, width=250)
        self.list_ctrl_1.AppendColumn("Schnittstelle", format=wx.LIST_FORMAT_LEFT, width=100)
        sizer_7.Add(self.list_ctrl_1, 1, wx.EXPAND, 0)

        grid_sizer_7 = wx.GridSizer(2, 5, 4, 6)
        sizer_7.Add(grid_sizer_7, 0, wx.EXPAND, 0)

        label_14 = wx.StaticText(self.Rekalkulator, wx.ID_ANY, "von")
        grid_sizer_7.Add(label_14, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.von_rekalk = wx.TextCtrl(self.Rekalkulator, wx.ID_ANY, "")
        self.von_rekalk.SetMinSize((125, 25))
        grid_sizer_7.Add(self.von_rekalk, 2, wx.ALL, 1)

        label_12 = wx.StaticText(self.Rekalkulator, wx.ID_ANY, u"Points auswählen")
        grid_sizer_7.Add(label_12, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT, 0)

        self.Suchtext_rekalk = wx.TextCtrl(self.Rekalkulator, wx.ID_ANY, "%")
        self.Suchtext_rekalk.SetMinSize((125, 25))
        grid_sizer_7.Add(self.Suchtext_rekalk, 2, wx.ALL, 1)

        self.Tags_suchen = wx.Button(self.Rekalkulator, wx.ID_ANY, "Points suchen")
        self.Tags_suchen.SetMinSize((100, 25))
        grid_sizer_7.Add(self.Tags_suchen, 1, wx.ALL, 1)

        label_15 = wx.StaticText(self.Rekalkulator, wx.ID_ANY, "bis")
        grid_sizer_7.Add(label_15, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.bis_rekalk = wx.TextCtrl(self.Rekalkulator, wx.ID_ANY, "")
        self.bis_rekalk.SetMinSize((125, 25))
        grid_sizer_7.Add(self.bis_rekalk, 2, wx.ALL, 1)

        grid_sizer_7.Add((0, 0), 0, 0, 0)

        grid_sizer_7.Add((0, 0), 0, 0, 0)

        self.Rekalk_berechnen = wx.Button(self.Rekalkulator, wx.ID_ANY, "berechnen")
        self.Rekalk_berechnen.SetMinSize((100, 25))
        grid_sizer_7.Add(self.Rekalk_berechnen, 1, wx.ALL, 1)

        self.Export = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.Export, "Export")

        grid_sizer_4 = wx.FlexGridSizer(2, 2, 0, 0)

        grid_sizer_4.Add((10, 10), 0, 0, 0)

        grid_sizer_4.Add((10, 10), 0, 0, 0)

        grid_sizer_4.Add((10, 10), 0, 0, 0)

        grid_sizer_8 = wx.FlexGridSizer(4, 2, 10, 10)
        grid_sizer_4.Add(grid_sizer_8, 1, wx.EXPAND, 0)

        grid_sizer_9 = wx.GridSizer(1, 1, 10, 10)
        grid_sizer_8.Add(grid_sizer_9, 1, wx.EXPAND, 0)

        label_18 = wx.StaticText(self.Export, wx.ID_ANY, "Point_ID")
        label_18.SetMinSize((60, 25))
        grid_sizer_9.Add(label_18, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        grid_sizer_6 = wx.FlexGridSizer(1, 4, 0, 10)
        grid_sizer_8.Add(grid_sizer_6, 1, wx.EXPAND, 0)

        self.Point_ID_Export = wx.TextCtrl(self.Export, wx.ID_ANY, "")
        self.Point_ID_Export.SetMinSize((97, 25))
        grid_sizer_6.Add(self.Point_ID_Export, 0, 0, 0)

        label_16 = wx.StaticText(self.Export, wx.ID_ANY, "oder Tag")
        label_16.SetMinSize((55, 25))
        grid_sizer_6.Add(label_16, 0, wx.ALIGN_RIGHT, 0)

        self.Suchtext_Export = wx.TextCtrl(self.Export, wx.ID_ANY, "%")
        self.Suchtext_Export.SetMinSize((300, 25))
        grid_sizer_6.Add(self.Suchtext_Export, 2, wx.ALL | wx.EXPAND, 1)

        self.Point_suchen_Export = wx.Button(self.Export, wx.ID_ANY, "Point suchen")
        self.Point_suchen_Export.SetMinSize((90, 25))
        grid_sizer_6.Add(self.Point_suchen_Export, 0, wx.ALL, 1)

        label_23 = wx.StaticText(self.Export, wx.ID_ANY, "Zielverzeichnis")
        grid_sizer_8.Add(label_23, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        grid_sizer_10 = wx.FlexGridSizer(1, 2, 0, 10)
        grid_sizer_8.Add(grid_sizer_10, 1, wx.EXPAND, 0)

        self.Zielverzeichnis = wx.TextCtrl(self.Export, wx.ID_ANY, "")
        self.Zielverzeichnis.SetMinSize((474, 25))
        grid_sizer_10.Add(self.Zielverzeichnis, 0, 0, 0)

        self.Ordner_suchen = wx.Button(self.Export, wx.ID_ANY, ". . .")
        self.Ordner_suchen.SetMinSize((90, 25))
        grid_sizer_10.Add(self.Ordner_suchen, 0, 0, 0)

        grid_sizer_8.Add((0, 0), 0, 0, 0)

        grid_sizer_11 = wx.GridSizer(1, 2, 0, 10)
        grid_sizer_8.Add(grid_sizer_11, 1, wx.EXPAND, 0)

        self.Artliste = wx.ListCtrl(self.Export, wx.ID_ANY, style=wx.BORDER_RAISED | wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES)
        self.Artliste.SetMinSize((98, 210))
        self.Artliste.AppendColumn("Art", format=wx.LIST_FORMAT_LEFT, width=98)
        grid_sizer_11.Add(self.Artliste, 1, 0, 0)

        label_17 = wx.StaticText(self.Export, wx.ID_ANY, u"\n\nExportiert alle Werte des angegebenen\nTags und der ausgewählten Art(en) in das\nangegebene Verzeichnis.")
        grid_sizer_11.Add(label_17, 0, 0, 0)

        grid_sizer_8.Add((0, 0), 0, 0, 0)

        self.exportieren = wx.Button(self.Export, wx.ID_ANY, "exportieren")
        grid_sizer_8.Add(self.exportieren, 0, 0, 0)

        self.Archive_bereinigen = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.Archive_bereinigen, "Archive_bereinigen")

        grid_sizer_13 = wx.GridSizer(2, 1, 10, 10)

        grid_sizer_12 = wx.FlexGridSizer(4, 5, 10, 10)
        grid_sizer_13.Add(grid_sizer_12, 0, 0, 0)

        grid_sizer_12.Add((20, 20), 0, 0, 0)

        grid_sizer_12.Add((0, 0), 0, 0, 0)

        grid_sizer_12.Add((0, 0), 0, 0, 0)

        grid_sizer_12.Add((0, 0), 0, 0, 0)

        grid_sizer_12.Add((0, 0), 0, 0, 0)

        grid_sizer_12.Add((0, 0), 0, 0, 0)

        label_19 = wx.StaticText(self.Archive_bereinigen, wx.ID_ANY, "von Monat")
        grid_sizer_12.Add(label_19, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.von_Monat = wx.TextCtrl(self.Archive_bereinigen, wx.ID_ANY, "")
        self.von_Monat.SetMinSize((40, 24))
        grid_sizer_12.Add(self.von_Monat, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_20 = wx.StaticText(self.Archive_bereinigen, wx.ID_ANY, "Jahr")
        grid_sizer_12.Add(label_20, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.von_Jahr = wx.TextCtrl(self.Archive_bereinigen, wx.ID_ANY, "")
        self.von_Jahr.SetMinSize((50, 24))
        grid_sizer_12.Add(self.von_Jahr, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        grid_sizer_12.Add((0, 0), 0, 0, 0)

        label_21 = wx.StaticText(self.Archive_bereinigen, wx.ID_ANY, "bis Monat")
        grid_sizer_12.Add(label_21, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.bis_Monat = wx.TextCtrl(self.Archive_bereinigen, wx.ID_ANY, "")
        self.bis_Monat.SetMinSize((40, 24))
        grid_sizer_12.Add(self.bis_Monat, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_22 = wx.StaticText(self.Archive_bereinigen, wx.ID_ANY, "Jahr")
        grid_sizer_12.Add(label_22, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.bis_Jahr = wx.TextCtrl(self.Archive_bereinigen, wx.ID_ANY, "")
        self.bis_Jahr.SetMinSize((50, 24))
        grid_sizer_12.Add(self.bis_Jahr, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        grid_sizer_12.Add((0, 0), 0, 0, 0)

        grid_sizer_12.Add((0, 0), 0, 0, 0)

        self.Start = wx.Button(self.Archive_bereinigen, wx.ID_ANY, "Start")
        self.Start.SetMinSize((85, 24))
        grid_sizer_12.Add(self.Start, 0, 0, 0)

        grid_sizer_12.Add((0, 0), 0, 0, 0)

        grid_sizer_12.Add((0, 0), 0, 0, 0)

        self.Fortschritt = wx.Gauge(self.Archive_bereinigen, wx.ID_ANY, 100, style=wx.GA_HORIZONTAL | wx.GA_SMOOTH)
        self.Fortschritt.SetMinSize((940, 20))
        grid_sizer_13.Add(self.Fortschritt, 3, wx.ALL, 2)

        self.Archive_bereinigen.SetSizer(grid_sizer_13)

        grid_sizer_6.AddGrowableCol(2)

        grid_sizer_8.AddGrowableRow(0)
        grid_sizer_8.AddGrowableRow(1)
        grid_sizer_8.AddGrowableRow(2)

        self.Export.SetSizer(grid_sizer_4)

        self.Rekalkulator.SetSizer(sizer_7)

        self.Archiveditor.SetSizer(sizer_1)

        sizer_5.AddGrowableCol(0)

        grid_sizer_3.AddGrowableRow(1)
        self.Verbindungen.SetSizer(grid_sizer_3)

        self.SetSizer(sizer_6)

        self.Layout()

        self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.evt_Umschaltung, self.notebook_1)
        self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGING, self.evt_Umschaltung, self.notebook_1)
        self.Bind(wx.EVT_NAVIGATION_KEY, self.evt_Umschaltung)
        self.Bind(wx.EVT_LIST_COL_CLICK, self.evt_Umschaltung, self.Verbindungsliste)
        self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.evt_Verbindung_Aenderung_nachschauen, self.Verbindungsliste)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.evt_Verb_auswaehlen, self.Verbindungsliste)
        self.Bind(wx.EVT_TEXT_ENTER, self.evt_Verbindungen_Server_edit, self.Verb_Feld_Datenverz)
        self.Bind(wx.EVT_TEXT_ENTER, self.evt_Verbindungen_Server_edit, self.Verb_Feld_Server)
        self.Bind(wx.EVT_TEXT_ENTER, self.evt_Verbindungen_Server_edit, self.Verb_Feld_Db)
        self.Bind(wx.EVT_TEXT_ENTER, self.evt_Verbindungen_Server_edit, self.Verb_Feld_Benutzer)
        self.Bind(wx.EVT_TEXT_ENTER, self.evt_Verbindungen_Server_edit, self.Verb_Feld_Passwort)
        self.Bind(wx.EVT_CHECKBOX, self.evt_Verbindungen_Server_edit, self.Verb_Feld_default)
        self.Bind(wx.EVT_BUTTON, self.evt_verbinden, self.verbinden)
        self.Bind(wx.EVT_BUTTON, self.evt_neue_Verbindung, self.Verbindung_neu)
        self.Bind(wx.EVT_BUTTON, self.evt_Verbindung_speichern, self.Verbindung_speichern)
        self.Bind(wx.EVT_BUTTON, self.evt_Verbindung_loeschen, self.Verbindung_loeschen)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_CHANGED, self.evt_Zelle_editiert, self.Werte)
        self.Bind(wx.EVT_BUTTON, self.evt_Zeilen_entfernen, self.Zeilen_entfernen)
        self.Bind(wx.EVT_BUTTON, self.evt_speichern, self.uebernehmen)
        self.Bind(wx.EVT_BUTTON, self.evt_einfuegen, self.einfuegen)
        self.Bind(wx.EVT_TEXT, self.evt_Point_ID_schreiben, self.Suchtext)
        self.Bind(wx.EVT_BUTTON, self.evt_PointDialog_oeffnen, self.Point_suchen)
        self.Bind(wx.EVT_TEXT, self.evt_Point_ID_schreiben, self.Wert_von)
        self.Bind(wx.EVT_TEXT, self.evt_Point_ID_schreiben, self.Wert_bis)
        self.Bind(wx.EVT_BUTTON, self.evt_Daten_holen, self.Daten_holen)
        self.Bind(wx.EVT_TEXT, self.evt_Point_ID_schreiben, self.Suchtext_rekalk)
        self.Bind(wx.EVT_BUTTON, self.evt_MultiPointDialog_oeffnen, self.Tags_suchen)
        self.Bind(wx.EVT_BUTTON, self.evt_Rekalk_berechnen, self.Rekalk_berechnen)
        self.Bind(wx.EVT_TEXT, self.evt_Point_ID_schreiben, self.Suchtext_Export)
        self.Bind(wx.EVT_BUTTON, self.evt_PointDialog_oeffnen, self.Point_suchen_Export)
        self.Bind(wx.EVT_BUTTON, self.evt_Ordner_suchen, self.Ordner_suchen)
        self.Bind(wx.EVT_BUTTON, self.evt_exportieren, self.exportieren)
        self.Bind(wx.EVT_BUTTON, self.evt_sortieren, self.Start)
        # end wxGlade
        self.evt_Umschaltung(None)

    def __set_properties(self):
        DH_Funktionen.Verbindungen_einlesen()
        verbunden = DH_Funktionen.Verbindung_herstellen("")
        self.Hauptrahmen_statusbar.SetStatusText(verbunden, 0)
    def evt_Daten_holen(self, event):  # wxGlade: Hauptrahmen.<event_handler>
        global Inhalte, Start, Ende, Point_ID, step, Mittelwerte, entfernte_Zeilen
        DH_Funktionen.db.query("SELECT `step`, `Mittelwerte` FROM `Points` WHERE `Point_ID` = " + self.Point_ID.GetValue() + ";")
        Ergebnis=DH_Funktionen.db.store_result()
        Satz = Ergebnis.fetch_row(maxrows=0, how=1)
        step = Satz[0]["step"]
        Mittelwerte = Satz[0]["Mittelwerte"]
        Start = self.von.GetValue()
        if Start == "jetzt":
            Start = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time()))
        Ende =self.bis.GetValue()
        if Ende == "jetzt":
            Ende = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time()))
        Zeilen = 0
        Inhalte = list()
        entfernte_Zeilen = list()
        Saetze = lesen.lesen('rV', self.Point_ID.GetValue(), Start, Ende, 0, 0, Datenverz)
        if type(Saetze[0]) is str:
            Saetze_temp = []
            Saetze_temp.append([])
            Saetze_temp[0] = Saetze
            Saetze = Saetze_temp
        Inhalte.extend (Saetze)
        i = 0
        while i < len(Inhalte):
            Inhalte[i].append(Inhalte[i][0])
            Inhalte[i].append(Inhalte[i][1])
            i = i + 1
        Zeilen = Zeilen + len(Saetze)
        Point_ID = self.Point_ID.GetValue()
        try:
            self.Werte.DeleteRows(pos=0, numRows=self.Werte.GetNumberRows()) 
        except:
            pass
        Reihen = 0
        for Zeile in range(0, Zeilen) :
            nehmen = 2
            if self.Wert_von.GetValue() > "":
                if float(Inhalte[Zeile][1]) >= float(self.Wert_von.GetValue()):
                    nehmen = nehmen - 1
            else:
                nehmen = nehmen - 1
            if self.Wert_bis.GetValue() > "":
                if float(Inhalte[Zeile][1]) <= float(self.Wert_bis.GetValue()):
                    nehmen = nehmen - 1
            else:
                nehmen = nehmen - 1
            if nehmen == 0:
                self.Werte.AppendRows(numRows=1)
                self.Werte.SetCellValue(Reihen, 0, str(Inhalte[Zeile][0]))
                self.Werte.SetCellValue(Reihen, 1, str(Inhalte[Zeile][1]))
                Reihen = Reihen + 1
        self.Werte.SetColSize(0,130)
        self.Werte.SetColSize(1,100)
    def evt_Zelle_editiert(self, event):  # wxGlade: Hauptrahmen.<event_handler>
        Position = self.Werte.GetGridCursorRow()
        Inhalte[Position][2]=self.Werte.GetCellValue(Position,0)
        Inhalte[Position][3]=self.Werte.GetCellValue(Position,1)
    def evt_Point_ID_schreiben(self, event):  # wxGlade: Hauptrahmen.<event_handler>
        global Point_ID
        try:
            DH_Funktionen.db.query("SELECT `Point_ID` FROM `Points` WHERE `Pointname` like '" + self.Suchtext.GetValue() + "';")
            Ergebnis=DH_Funktionen.db.store_result()
            Satz = Ergebnis.fetch_row(maxrows=0, how=1)
            self.Point_ID.SetValue(Satz[0]["Point_ID"])
            Point_ID = Satz[0]["Point_ID"]
        except:
            pass
    def evt_Zeilen_entfernen(self, event):  # wxGlade: Hauptrahmen.<event_handler>
        global bearbeitet, eingelesen,  Inhalte
        Anzahl = len(self.Werte.GetSelectedRows())
        Zeile = Anzahl - 1
        for x in self.Werte.GetSelectedRows():
            Position = self.Werte.GetSelectedRows()[Zeile]
            entfernte_Zeilen.append (Inhalte[Position])
            Inhalte = Inhalte[ : Position ] + Inhalte[Position+1 : ]
            self.Werte.DeleteRows(pos=Position, numRows=1)
            Zeile = Zeile -1
    def evt_speichern(self, event):  # wxGlade: Hauptrahmen.<event_handler>
        global Stunden, step, Mittelwerte, entfernte_Zeilen
        #erstmal nachschauen, ob irgendwo der Zeitstempel geaendert wurde. Wenn ja, dann muß der bisherige Eintrag aus der DB geloescht werden.
        i = 0
        while i < len(Inhalte):
            if Inhalte[i][0] != Inhalte[i][2]:
                try:
                    entfernte_Zeilen.index(str(Inhalte[i][0]))
                except:
                    entfernte_Zeilen.append (Inhalte[i])
            i = i + 1
        i = 0
        von = ""
        bis = ""
        while i < len(entfernte_Zeilen):
            if von == "":
                von = entfernte_Zeilen[i][2]
            if entfernte_Zeilen[i][2] < von:
                von = entfernte_Zeilen[i][2]
            if entfernte_Zeilen[i][2] > bis:
                bis = entfernte_Zeilen[i][2]
            i = i + 1
        #Jetzt die Zeilen in der DB loeschen
        for Zeile in entfernte_Zeilen:
            try:
                DH_Funktionen.Kollektiv_loeschen(Zeile[0], Zeile[0], Point_ID, 'rV')
            except:
                pass
            if Mittelwerte == 1:
                #vt berechnen
                #zuerst den Wert und Zeitstempel des Vorgaengers
                vt = "0"
                vt_interpol = "0"
                try:
                    ZeileZeitstempel = Zeile[0]
                    if ZeileZeitstempel == "":
                        ZeileZeitstempel = Zeile[2]
                    Vorgaenger = lesen.lesen('rV', Point_ID, ZeileZeitstempel, ZeileZeitstempel, 1, 0, Datenverz)
                    #Dann den Nachfolger
                    Nachfolger = lesen.lesen('rV', Point_ID, ZeileZeitstempel, ZeileZeitstempel, 0, 1, Datenverz)
                    #neue vt's des Nachfolgers berechnen
                    if type(Nachfolger[0]) is list:
                        Zeit_Nachfolger =  time.mktime(time.strptime(Nachfolger[0][0], "%Y-%m-%d %H:%M:%S"))
                        Wert_Nachfolger = float(Nachfolger[0][1]) 
                    else:
                        Zeit_Nachfolger =  time.mktime(time.strptime(Nachfolger[0], "%Y-%m-%d %H:%M:%S"))
                        Wert_Nachfolger = float(Nachfolger[1]) 
                    if type(Vorgaenger[0]) is list:
                        Zeit_Vorgaenger = time.mktime(time.strptime(Vorgaenger[0][0], "%Y-%m-%d %H:%M:%S"))
                        Wert_Vorgaenger = float(Vorgaenger[0][1])
                    else:
                        Zeit_Vorgaenger = time.mktime(time.strptime(Vorgaenger[0], "%Y-%m-%d %H:%M:%S"))
                        Wert_Vorgaenger = float(Vorgaenger[1])                        
                    vt = str(Wert_Vorgaenger * (Zeit_Nachfolger - Zeit_Vorgaenger))
                    Diff = (Wert_Vorgaenger - Wert_Nachfolger)
                    if Diff != 0:
                        vt_interpol = str((Wert_Vorgaenger + Wert_Nachfolger) / 2 * (Zeit_Nachfolger - Zeit_Vorgaenger))
                    else:
                        vt_interpol = vt
                    #vt's des Nachfolgers schreiben
                    if type(Nachfolger[0]) is list:
                        DH_Funktionen.Kollektiv_schreiben(Nachfolger[0][0],  Nachfolger[0][1], str(Zeit_Nachfolger), vt,  vt_interpol,  Point_ID,  'rV')
                    else:
                        DH_Funktionen.Kollektiv_schreiben(Nachfolger[0],  Nachfolger[1], str(Zeit_Nachfolger), vt,  vt_interpol,  Point_ID,  'rV')
                    #Merken, welche Mittelwerte neu berechnet werden muessen.
                    if type(Nachfolger[0]) is list:
                        DH_Funktionen.Stunde_merken(Nachfolger[0][0])
                    else:
                        DH_Funktionen.Stunde_merken(Nachfolger[0])
                except:
                    pass
            entfernte_Zeilen = entfernte_Zeilen[slice(1,len(entfernte_Zeilen))]
        #Werte editieren
        i = 0
        while i < len(Inhalte):
            if Inhalte[i][0] != Inhalte[i][2] or Inhalte[i][1] != Inhalte[i][3]:
                if Mittelwerte == 1:
                    #vt berechnen
                    #zuerst den Wert und Zeitstempel des Vorgaengers
                    vt = "0"
                    vt_interpol = "0"
                    try:
                        Vorgaenger = lesen.lesen('rV', Point_ID, Inhalte[i][2], Inhalte[i][2], 1, 0, Datenverz)
                        #neue vt's des editierten Satzes berechnen
                        if type(Vorgaenger[0]) is list:
                            Zeit_Vorgaenger = time.mktime(time.strptime(Vorgaenger[0][0], "%Y-%m-%d %H:%M:%S"))
                            Wert_Vorgaenger = float(Vorgaenger[0][1])
                        else:
                            Zeit_Vorgaenger = time.mktime(time.strptime(Vorgaenger[0], "%Y-%m-%d %H:%M:%S"))
                            Wert_Vorgaenger = float(Vorgaenger[1])
                        Zeit_Nachfolger = time.mktime(time.strptime(Inhalte[i][2], "%Y-%m-%d %H:%M:%S"))
                        Wert_Nachfolger = float(Inhalte[i][3]) 
                        vt = str(Wert_Vorgaenger * (Zeit_Nachfolger - Zeit_Vorgaenger))
                        Diff = (Wert_Nachfolger - Wert_Vorgaenger)
                        if Diff != 0:
                            vt_interpol = (Zeit_Nachfolger - Zeit_Vorgaenger) * (Wert_Nachfolger + Wert_Vorgaenger) / 2
                        else:
                            vt_interpol = 0
                    except:
                        pass
                    DH_Funktionen.Kollektiv_schreiben(Inhalte[i][2], Inhalte[i][3],time.mktime(time.strptime(Inhalte[i][2], "%Y-%m-%d %H:%M:%S")), vt, vt_interpol, Point_ID, 'rV')
                    try:
                        #Merken, welche Mittelwerte neu berechnet werden muessen.
                        DH_Funktionen.Stunde_merken(Inhalte[i][2])
                    except:
                        pass
                    vt = "0"
                    vt_interpol = "0"
                    Zeit_Vorgaenger = time.mktime(time.strptime(Inhalte[i][2], "%Y-%m-%d %H:%M:%S"))
                    Wert_Vorgaenger = float(Inhalte[i][3])
                    try:
                        #Dann den Nachfolger
                        Nachfolger = lesen.lesen('rV', Point_ID, Inhalte[i][2], Inhalte[i][2], 0, 1, Datenverz)
                        #neue vt's des Nachfolgers berechnen
                        if type(Nachfolger[0]) is list:
                            Zeit_Nachfolger = time.mktime(time.strptime(Nachfolger[0][0], "%Y-%m-%d %H:%M:%S"))
                            Zeitstempel_Nachfolger = Nachfolger[0][0]
                            Wert_Nachfolger = float(Nachfolger[0][1])
                        else:
                            Zeit_Nachfolger = time.mktime(time.strptime(Nachfolger[0], "%Y-%m-%d %H:%M:%S"))
                            Zeitstempel_Nachfolger = Nachfolger[0]
                            Wert_Nachfolger = float(Nachfolger[1])
                        vt = str(Wert_Vorgaenger * (Zeit_Nachfolger - Zeit_Vorgaenger))
                        Diff = (Wert_Vorgaenger - Wert_Nachfolger)
                        if Diff != 0:
                            vt_interpol = (Zeit_Nachfolger - Zeit_Vorgaenger) * (Wert_Nachfolger + Wert_Vorgaenger) / 2
                        else:
                            vt_interpol = 0
                        try:
                            DH_Funktionen.Kollektiv_schreiben(Zeitstempel_Nachfolger, Wert_Nachfolger,time.mktime(time.strptime(Zeitstempel_Nachfolger, "%Y-%m-%d %H:%M:%S")), vt, vt_interpol, Point_ID, 'rV')
                            #Merken, welche Mittelwerte neu berechnet werden muessen.
                            DH_Funktionen.Stunde_merken(Nachfolger[0])
                        except:
                            pass
                    except:
                        pass
                else:
                    try:
                        DH_Funktionen.Kollektiv_schreiben(Inhalte[i][2], Inhalte[i][3],time.mktime(time.strptime(Inhalte[i][2], "%Y-%m-%d %H:%M:%S")), vt, vt_interpol, Point_ID, 'rV')
                    except:
                        pass
            i = i + 1
        DH_Funktionen.Mittelwerte_schreiben(Point_ID, step, Mittelwerte)
        self.evt_Daten_holen(event)
    def evt_einfuegen(self, event):  # wxGlade: Hauptrahmen.<event_handler>
        global Inhalte
        pos = len(Inhalte) - 1
        Zeile = Inhalte[pos].copy()
        pos = pos + 1
        Inhalte.append(Zeile)
        Inhalte[pos][0] = ""
        Inhalte[pos][2] = ""
        Inhalte[pos][1] = ""
        Inhalte[pos][3] = ""
        self.Werte.AppendRows(numRows=1)
        self.Werte.GoToCell(self.Werte.GetNumberRows() - 1, 0)
    def evt_PointDialog_oeffnen(self, event):  # wxGlade: Hauptrahmen.<event_handler>
        global Inhalte, entfernte_Zeilen
        self.Pointliste = Pointliste(None, wx.ID_ANY, "")
        self.Pointliste.Show()
        if self.notebook_1.GetPageText( self.notebook_1.GetSelection()) == "Export":
            DH_Funktionen.db.query("SELECT `Point_ID`, `Path`, `Pointname`, `Description`, `Interface` FROM `Points` WHERE `Pointname` like '" + self.Suchtext_Export.GetValue() + "' or `Description` like '" + self.Suchtext_Export.GetValue() + "' or `Interface` like '" + self.Suchtext_Export.GetValue() + "' ORDER BY `Pointname` ASC;")
        else:
            Inhalte = list()
            entfernte_Zeilen = list()
            DH_Funktionen.db.query("SELECT `Path`, `Point_ID`, `Pointname`, `Description`, `Interface` FROM `Points` WHERE `Point_ID` like '" + self.Suchtext.GetValue() + "' or `Pointname` like '" + self.Suchtext.GetValue() + "' or `Description` like '" + self.Suchtext.GetValue() + "' or `Interface` like '" + self.Suchtext.GetValue() + "' ORDER BY `Pointname` ASC;")
        Pointliste.Liste_hinterlegen(self, self.notebook_1.GetPageText( self.notebook_1.GetSelection()))
        Ergebnis = DH_Funktionen.db.store_result()
        Saetze = Ergebnis.fetch_row(maxrows=0, how=1)
        Zeilen = len(Saetze)
        for Zeile in range(0, Zeilen) :
            self.Pointliste.list_ctrl_Pointliste.Append([Saetze[Zeile]["Point_ID"], Saetze[Zeile]["Path"], Saetze[Zeile]["Pointname"], Saetze[Zeile]["Description"], Saetze[Zeile]["Interface"]])

    def evt_Verb_auswaehlen(self, event):  # wxGlade: Hauptrahmen.<event_handler>
        global Verbindung_editiert, Datenverz
        Verbindung_editiert = 3
        ausgewaehlt = self.Verbindungsliste.GetFocusedItem()
        self.Verb_Feld_Datenverz.SetValue(DH_Funktionen.Verbindungen[ausgewaehlt]["Datenverzeichnis"])
        Datenverz = DH_Funktionen.Verbindungen[ausgewaehlt]["Datenverzeichnis"]
        self.Verb_Feld_Server.SetValue(DH_Funktionen.Verbindungen[ausgewaehlt]["Server"])
        self.Verb_Feld_Db.SetValue(DH_Funktionen.Verbindungen[ausgewaehlt]["Datenbank"])
        self.Verb_Feld_Benutzer.SetValue(DH_Funktionen.Verbindungen[ausgewaehlt]["Benutzer"])
        self.Verb_Feld_Passwort.SetValue(DH_Funktionen.Verbindungen[ausgewaehlt]["Passwort"])
        ankreuzen = 0
        if DH_Funktionen.Verbindungen[ausgewaehlt]["default"] == "true":
            ankreuzen = -1
        self.Verb_Feld_default.SetValue(ankreuzen)
        Verbindung_editiert = 0
    def evt_verbinden(self, event):  # wxGlade: Hauptrahmen.<event_handler>
        verbunden = DH_Funktionen.Verbindung_herstellen(str(self.Verbindungsliste.GetFocusedItem()))
        self.Hauptrahmen_statusbar.SetStatusText(verbunden, 0)
    def evt_neue_Verbindung(self, event):  # wxGlade: Hauptrahmen.<event_handler>
        Verb = ({'Server': 'IP oder Hostnamen', 'Datenverzeichnis': '/var/lib/DH/', 'Benutzer': 'root', 'Passwort': '', 'Datenbank': 'DH', 'default': 'false'})
        DH_Funktionen.Verbindungen.append(Verb)
        self.Verb_Feld_Server.SetValue("IP oder Hostnamen")
        self.Verb_Feld_Db.SetValue("DH")
        self.Verb_Feld_Benutzer.SetValue("")
        self.Verb_Feld_Passwort.SetValue("")
        DH_Funktionen.Verbindungen_speichern()
        self.evt_Umschaltung(None)
        self.Verbindungsliste.Select(self.Verbindungsliste.GetItemCount() - 1)
    def evt_Verbindung_speichern(self, event):  # wxGlade: Hauptrahmen.<event_handler>
        global Verbindung_editiert
        Verbindung_editiert = 2
        self.evt_Verbindung_Aenderung_nachschauen(event)
    def evt_Verbindung_loeschen(self, event):  # wxGlade: Hauptrahmen.<event_handler>
        global Verbindung_editiert
        akzeptiert = wx.lib.dialogs.messageDialog(parent=None, message='Soll die Verbindung wirklich gelöscht werden?', title='bitte bestätigen', aStyle = wx.YES_NO | wx.CENTRE, pos=wx.DefaultPosition).returnedString
        if akzeptiert == "Yes":
            ausgewaehlt = self.Verbindungsliste.GetFocusedItem()
            DH_Funktionen.Verbindungen = DH_Funktionen.Verbindungen[ : ausgewaehlt ] + DH_Funktionen.Verbindungen[ausgewaehlt+1 : ]
            DH_Funktionen.Verbindungen_speichern()
            Verbindung_editiert = 0
            self.evt_Umschaltung(None)
            self.Verb_Feld_Server.SetValue("")
            self.Verb_Feld_Db.SetValue("")
            self.Verb_Feld_Benutzer.SetValue("")
            self.Verb_Feld_Passwort.SetValue("")
            try:
                self.Verbindungsliste.Select(0)
            except:
                pass
    def evt_Verbindungen_Server_edit(self, event):  # wxGlade: Hauptrahmen.<event_handler>
        global Verbindung_editiert
        ausgewaehlt = self.Verbindungsliste.GetFocusedItem()
        if Verbindung_editiert == 0:
            if self.Verb_Feld_Server.GetValue() != DH_Funktionen.Verbindungen[ausgewaehlt]["Server"]:
                Verbindung_editiert = 1
            if self.Verb_Feld_Db.GetValue() != DH_Funktionen.Verbindungen[ausgewaehlt]["Datenbank"]:
                Verbindung_editiert = 1
            if self.Verb_Feld_Benutzer.GetValue() != DH_Funktionen.Verbindungen[ausgewaehlt]["Benutzer"]:
                Verbindung_editiert = 1
            if self.Verb_Feld_Passwort.GetValue() != DH_Funktionen.Verbindungen[ausgewaehlt]["Passwort"]:
                Verbindung_editiert = 1
            if DH_Funktionen.Verbindungen[ausgewaehlt]["default"] == "true":
                markiert = True
            else:
                markiert = False
            if self.Verb_Feld_default.GetValue() != markiert:
                Verbindung_editiert = 1
    def evt_Verbindung_Aenderung_nachschauen(self, event):  # wxGlade: Hauptrahmen.<event_handler>
        global Verbindung_editiert
        if Verbindung_editiert > 0:
            if Verbindung_editiert == 1:
                akzeptiert = wx.lib.dialogs.messageDialog(parent=None, message='Sollen die Aenderungen gespeichert werden?', title='Die Verbindung wurde bearbeitet.', aStyle = wx.YES_NO | wx.CENTRE, pos=wx.DefaultPosition).returnedString
            else:
                if Verbindung_editiert == 2:
                    akzeptiert = "Yes"
                else:
                    akzeptiert = "No"
            if akzeptiert == "Yes":
                ausgewaehlt = self.Verbindungsliste.GetFocusedItem()
                DH_Funktionen.Verbindungen[ausgewaehlt]["Server"] = self.Verb_Feld_Server.GetValue()
                DH_Funktionen.Verbindungen[ausgewaehlt]["Datenbank"] = self.Verb_Feld_Db.GetValue()
                DH_Funktionen.Verbindungen[ausgewaehlt]["Benutzer"] = self.Verb_Feld_Benutzer.GetValue()
                DH_Funktionen.Verbindungen[ausgewaehlt]["Passwort"] = self.Verb_Feld_Passwort.GetValue()
                if self.Verb_Feld_default.GetValue() == True:
                    DH_Funktionen.Verbindungen[ausgewaehlt]["default"] ="true"
                    i = 0
                    while i < len(DH_Funktionen.Verbindungen):
                        if i != ausgewaehlt:
                            DH_Funktionen.Verbindungen[i]["default"] ="false"
                        i = i + 1
                else:
                    DH_Funktionen.Verbindungen[ausgewaehlt]["default"] ="false"
                DH_Funktionen.Verbindungen_speichern()
            Verbindung_editiert = 0
            self.evt_Umschaltung(None)
    def evt_MultiPointDialog_oeffnen(self, event):  # wxGlade: Hauptrahmen.<event_handler>
        self.MultiPointliste = MultiPointliste(None, wx.ID_ANY, "")
        self.MultiPointliste.Show()
        if self.notebook_1.GetPageText( self.notebook_1.GetSelection()) == "Rekalkulator":
            DH_Funktionen.db.query("SELECT `Point_ID`, `Pointname`, `Description`, `Interface` FROM `Points` WHERE `Point_Type` like 'calc' AND (`Pointname` like '" + self.Suchtext_rekalk.GetValue() + "' or `Description` like '" + self.Suchtext_rekalk.GetValue() + "' or `Path` like '" + self.Suchtext_rekalk.GetValue() + "') ORDER BY `Interface`, `Pointname` ASC;")
        if self.notebook_1.GetPageText( self.notebook_1.GetSelection()) == "Point- und Tagkonfiguration":
            DH_Funktionen.db.query("SELECT `Point_ID`, `Pointname`, `Description`, `Interface` FROM `Points` WHERE `Pointname` like '" + self.Pointkoniguration_Pointmuster.GetValue() + "' or `Description` like '" + self.Pointkoniguration_Pointmuster.GetValue() + "' or `Path` like '" + self.Pointkoniguration_Pointmuster.GetValue() + "' ORDER BY `Pointname` ASC;")
        Ergebnis=DH_Funktionen.db.store_result()
        Saetze = Ergebnis.fetch_row(maxrows=0, how=1)
        Zeilen = len(Saetze)
        for Zeile in range(0, Zeilen) :
            #Sonderbehandlung wegen Windoofs
            PointID = Saetze[Zeile]["Point_ID"]
            if type(PointID) == bytes:
                PointID = Saetze[Zeile]["Point_ID"].decode('ISO-8859-15', "ignore")
            #Ende Sonderbehandlung
            self.MultiPointliste.list_ctrl_Pointliste.Append([PointID, Saetze[Zeile]["Pointname"], Saetze[Zeile]["Description"], Saetze[Zeile]["Interface"]])
        MultiPointliste.Liste_hinterlegen(self, self.notebook_1.GetPageText( self.notebook_1.GetSelection()))

    def evt_Rekalk_berechnen(self, event):  # wxGlade: Hauptrahmen.<event_handler>
        #Anzahl betroffener Points ermitteln
        Anz_Points = self.list_ctrl_1.GetItemCount()
        #Array mit den Points anlegen
        Points=[]
        i = 0
        #Pointkonfiguration einlesen
        while i < Anz_Points:
            DH_Funktionen.db.query("SELECT `first_value`, `minarch`, `compression`, `Info`, `Point_ID`, `Intervall`, `step`, `Mittelwerte` FROM `Points` WHERE `Point_ID` = " + self.list_ctrl_1.GetItemText(i, col=0) + ";")
            Ergebnis=DH_Funktionen.db.store_result()
            Satz = Ergebnis.fetch_row(maxrows=0, how=1)
            Points.extend(Satz)
            i = i + 1
        #Zeitangaben testen und ggf korrigieren
        Start = self.von_rekalk.GetValue()
        if Start == "jetzt":
            Start = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time()))
        else:
            if self.Zeitstempel_testen(Start) == 1:
                wx.lib.dialogs.messageDialog(parent=None, message='Das Feld von enthält ein falsches Datumsformat.', title='Problem!', aStyle = wx.OK | wx.CENTRE, pos=wx.DefaultPosition).returnedString
                return
            else:
                if len(Start) == 10:
                    Start = self.von_rekalk.GetValue() + " 00:00:00"
                    self.von_rekalk.SetValue(Start)
        Ende = self.bis_rekalk.GetValue()
        if Ende == "jetzt":
            Ende = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time()))
        else:
            if self.Zeitstempel_testen(self.bis_rekalk.GetValue()) == 1:
                wx.lib.dialogs.messageDialog(parent=None, message='Das Feld bis enthält ein falsches Datumsformat.', title='Problem!', aStyle = wx.OK | wx.CENTRE, pos=wx.DefaultPosition).returnedString
                return
            else:
                if len(Ende) == 10:
                    Ende = self.bis_rekalk.GetValue() + " 00:00:00"
                    self.bis_rekalk.SetValue(Ende)
        #Anzahl der Rechenschritte berechnen
        i = 0
        Zeitpunkt_von =  time.mktime(time.strptime(Start, "%Y-%m-%d %H:%M:%S"))
        Zeitpunkt_bis =  time.mktime(time.strptime(Ende,  "%Y-%m-%d %H:%M:%S"))
        Zeitraum_sec = Zeitpunkt_bis - Zeitpunkt_von
        Rechenschritte = 0
        while i < Anz_Points:
            try:
                Rechenschritte = Rechenschritte + Zeitraum_sec / int(Points[i]['Intervall'])
            except:
                Rechenschritte = Rechenschritte + Zeitraum_sec / 60
            if str(Points[i]['Mittelwerte']) == "1":
                Rechenschritte = Rechenschritte + Zeitraum_sec / 3600
                Rechenschritte = Rechenschritte + Zeitraum_sec / 86400
            i = i + 1
        #Wartendialog vorbereiten
        dlg = PP.PyProgress(None, -1, "Berechnung läuft", "warten", agwStyle=wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME)
        dlg.SetGaugeProportion(0.1)
        dlg.SetGaugeSteps(50)
        dlg.SetGaugeBackground(wx.WHITE)
        dlg.SetFirstGradientColour(wx.WHITE)
        dlg.SetSecondGradientColour(wx.BLUE)
        count = 0
        dlg.UpdatePulse("entferne bisherige Werte")
        i = 0
        while i < Anz_Points:
            i = i + 1
        for Point in Points:
            #Alle Werte in dem betroffenen Zeitraum aus dem Archiv entfernen.
            DH_Funktionen.Kollektiv_loeschen(Start, Ende, Point["Point_ID"], 'rV')
            #Ausdruck vorbereiten
            Ausdruck = Point["Info"]
            Suchtext = "akt\("
            links = ""
            while re.search(Suchtext,Ausdruck):
                Zeichen = re.search(Suchtext,Ausdruck)
                rechts = Ausdruck[Zeichen.span()[1]:len(Ausdruck)]
                Point_ID = self.Point_ID_ermitteln(Ausdruck,  Zeichen.span()[1])
                links = links + Ausdruck[len(links):Zeichen.span()[0]] + "AW(" + str(Point_ID) + ",Zeitpunkt)"
                rechts = rechts[rechts.find(")")+1:]
                Ausdruck = links + rechts
            Ausdruck = Ausdruck.replace("time.time()", "Zeitpunkt")
            Ausdruck1 = Ausdruck
            Intervall = float(Point["Intervall"])
            Zeitpunkt = Zeitpunkt_von
            #Komprimierung vorbereiten
            i = 0
            Ergebnis = lesen.lesen('rV',Point["Point_ID"], Start, Start, 0, 0, Datenverz)
            if len(Ergebnis) == 0:
                Ergebnis = lesen.lesen('rV',Point["Point_ID"], Start, Start, 1, 0, Datenverz)
            if type(Ergebnis[0]) is list:
                Zeit_Archiv = time.mktime(time.strptime(str(Ergebnis[0][0]), "%Y-%m-%d %H:%M:%S"))
                Wert_Archiv = float(Ergebnis[0][1])
            else:
                Zeit_Archiv = time.mktime(time.strptime(str(Ergebnis[0]), "%Y-%m-%d %H:%M:%S"))
                Wert_Archiv = float(Ergebnis[1])
            #Werte berechnen
            while Zeitpunkt < Zeitpunkt_bis:
                Ausdruck1 = Ausdruck.replace("Zeitpunkt", str(Zeitpunkt))
                Wert = DH_Funktionen.berechnen(Ausdruck1, '0',  Zeitpunkt)
                if Wert != "Fehler":
                    Zeitstempel = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(Zeitpunkt))
                    #ggf komprimieren
                    nehmen = 0
                    Zeitstempel_neu = Zeitstempel
                    Wert_neu = float(Wert)
                    Zeit_neu = Zeitpunkt
                    if Zeitpunkt - Zeit_Archiv >= float(Point["minarch"]) and float(Point["minarch"]) > 0:
                        nehmen = 1
                    if Wert_neu != Wert_Archiv or nehmen == 1:
                        nehmen = 1
                        vt_interpol = (Wert_Archiv + Wert_neu) / 2 * (Zeit_neu - Zeit_Archiv)
                        vt = Wert_Archiv * (Zeit_neu - Zeit_Archiv)
                        if float(Point["compression"]) > 0:
                            Obergrenze = Wert_Archiv + float(Point["compression"])
                            Untergrenze = Wert_Archiv - float(Point["compression"])
                            if Wert_neu > Obergrenze or Wert_neu < Untergrenze:
                                nehmen = 1
                            else:
                                nehmen = 0
                    if nehmen == 1:
                        Zeit_Archiv = Zeit_neu
                        Wert_Archiv = Wert_neu
                        DH_Funktionen.Kollektiv_schreiben(str(Zeitstempel_neu), str(Wert_neu),  str(Zeit_neu), str(vt), str(vt_interpol), str(Point["Point_ID"]), "rV")
                count += 1
                if Intervall == 0:
                    Intervall = Zeitpunkt_bis - Zeitpunkt
                Zeitpunkt = Zeitpunkt + Intervall
                dlg.UpdatePulse(str(round(count / Rechenschritte * 100)) + "% berechnet")
                DH_Funktionen.Stunde_merken(Zeitstempel_neu)
            #Mittelwerte berechnen
            if int(Point["Mittelwerte"]) == 1:
                DH_Funktionen.Mittelwerte_schreiben(Point["Point_ID"], Point["step"],  Mittelwerte)
                count += len(Stunden)
                dlg.UpdatePulse(str(round(count / Rechenschritte * 100)) + "% berechnet")
            dlg.Destroy()
  
    def Zeitstempel_testen(self,  Zeitstempel):
        Fehler = 0
        try:
            x = int(Zeitstempel[:4])
            x = int(Zeitstempel[5:7])
            if x < 1 or x >12:
                Fehler = 1
            x = int(Zeitstempel[8:10])
            if x < 1 or x >31:
                Fehler = 1
            if len(Zeitstempel) > 10:
                x = int(Zeitstempel[11:13])
                if x < 0 or x > 23:
                    Fehler = 1
                x = int(Zeitstempel[14:16])
                if x < 0 or x > 60:
                    Fehler = 1
                x = int(Zeitstempel[17:19])
                if x < 0 or x > 60:
                    Fehler = 1
                if Zeitstempel[10] != " ":
                    Fehler = 1
                if Zeitstempel[13] != ":" or Zeitstempel[16] != ":":
                    Fehler = 1
            else:
                if len(Zeitstempel) == 10:
                    Zeitstempel = Zeitstempel + " 00:00:00"
                else:
                    Fehler = 1
        except:
            Fehler = 1
        try:
            if Zeitstempel[4] != "-" or Zeitstempel[7] != "-":
                Fehler = 1
        except:
            Fehler = 1
        return Fehler
    def Point_ID_ermitteln(self,  Ausdruck,  pos):
        Ergebnis = ""
        nehmen = ord(Ausdruck[pos:pos + 1])
        while nehmen>47 and nehmen <58:
            Ergebnis = Ergebnis + chr(nehmen)
            pos = pos +1
            nehmen = ord(Ausdruck[pos:pos + 1])
        return Ergebnis
    def evt_Umschaltung(self, event):  # wxGlade: Hauptrahmen.<event_handler>
        global Verbindung_editiert
        if Verbindung_editiert == 1:
            self.evt_Verbindung_Aenderung_nachschauen(None)
        if self.notebook_1.GetPageText( self.notebook_1.GetSelection()) == "Verbindungen":
            self.Verbindungsliste.DeleteAllItems()
            i = 0
            while i < len(DH_Funktionen.Verbindungen):
                self.Verbindungsliste.Append([DH_Funktionen.Verbindungen[i]["Server"]])
                i = i + 1
        if self.notebook_1.GetPageText( self.notebook_1.GetSelection()) == "Export":
            self.Artliste.DeleteAllItems()
            self.Artliste.Append(["rV"])
            self.Artliste.Append(["hMW"])
            self.Artliste.Append(["dMW"])
            self.Artliste.Append(["hMin"])
            self.Artliste.Append(["hMax"])
            self.Artliste.Append(["dMin"])
            self.Artliste.Append(["dMax"])
        if self.notebook_1.GetPageText( self.notebook_1.GetSelection()) == "Archive_bereinigen":
            Zeitstempel=time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time()))
            akt_Monat =Zeitstempel[5:7]
            akt_Jahr = Zeitstempel[0:4]
            self.von_Monat.SetValue(akt_Monat)
            self.bis_Monat.SetValue(self.von_Monat.GetValue())
            self.von_Jahr.SetValue(akt_Jahr)
            self.bis_Jahr.SetValue(self.von_Jahr.GetValue())
    def gesperrt(self):
        Liste = self.Pointtabelle
        i = 0
        while i <= Liste.GetNumberCols():
            if Liste.GetColLabelValue(i) == "Point_ID":
                return i
            i = i + 1
        return 0
    def evt_ende(self, event):  # wxGlade: Hauptrahmen.<event_handler>
        print("Event handler 'evt_ende' not implemented!")
        event.Skip()
    def evt_Ordner_suchen(self, event):  # wxGlade: Hauptrahmen.<event_handler>
        dlg = wx.DirDialog(self, os.getcwd(), "")
        if dlg.ShowModal() == wx.ID_OK: 
            wx.GetApp().Hauptrahmen.Zielverzeichnis.SetValue(dlg.GetPath())
        dlg.Destroy() 
        
    def evt_exportieren(self, event):  # wxGlade: Hauptrahmen.<event_handler>
        #Wartendialog vorbereiten
        dlg = PP.PyProgress(None, -1, "Daten werden kopiert", "warten", agwStyle=wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME)
        dlg.SetGaugeProportion(0.1)
        dlg.SetGaugeSteps(50)
        dlg.SetGaugeBackground(wx.WHITE)
        dlg.SetFirstGradientColour(wx.WHITE)
        dlg.SetSecondGradientColour(wx.BLUE)
        Runden = 0
        Pfad = self.Zielverzeichnis.GetValue() + "/"
        Zeile = -1
        starten = 1
        while Zeile != -1 or starten == 1:
            starten = 0
            try:
                Art = self.Artliste.GetItem(self.Artliste.GetNextSelected(Zeile)).Text
                JahrList = os.listdir(self.Verb_Feld_Datenverz.GetValue())
                JahrList.sort()
                for Jahr in JahrList:
                    MonList = os.listdir(self.Verb_Feld_Datenverz.GetValue() + Jahr)
                    MonList.sort()
                    for Monat in MonList:
                        Quellverz = self.Verb_Feld_Datenverz.GetValue() + Jahr + "/" + Monat + "/" + Art + "/"
                        try:
                            shutil.copy(Quellverz + str(self.Point_ID_Export.GetValue()), Pfad + Art + "_" + Jahr + "_" + Monat + "_" + str(self.Point_ID_Export.GetValue()))
                        except:
                            pass
                        Runden = Runden + 1
            except:
                pass
            Zeile = self.Artliste.GetNextSelected(Zeile)
        dlg.Destroy()
    def evt_sortieren(self, event):  # wxGlade: Hauptrahmen.<event_handler>
        Zeitstempel=time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time()))
        akt_Monat =Zeitstempel[5:7]
        akt_Jahr = Zeitstempel[0:4]
        Sorte = list(range(7))
        Sorte[0] = "rV"
        Sorte[1] = "hMin"
        Sorte[2] = "hMax"
        Sorte[3] = "hMW"
        Sorte[4] = "dMin"
        Sorte[5] = "dMax"
        Sorte[6] = "dMW"
        Anz_Dateien = 0
        while len(self.von_Monat.GetValue()) < 2:
            self.von_Monat.SetValue("0" + self.von_Monat.GetValue())
        while len(self.bis_Monat.GetValue()) < 2:
            self.bis_Monat.SetValue("0" + self.bis_Monat.GetValue())
        Fehler = 0
        try:
            int(self.von_Jahr.GetValue())
        except:
            Fehler = 1
            wx.lib.dialogs.messageDialog(parent=None, message='Das Startjahr muss eine Zahl sein.', title='Problem!', aStyle = wx.OK | wx.CENTRE, pos=wx.DefaultPosition).returnedString
        if Fehler == 0 and int(self.von_Jahr.GetValue()) > int(akt_Jahr):
            wx.lib.dialogs.messageDialog(parent=None, message='Das Startjahr darf nicht in der Zukunft liegen.', title='Problem!', aStyle = wx.OK | wx.CENTRE, pos=wx.DefaultPosition).returnedString
            Fehler = 1
        if Fehler == 0 and int(self.von_Monat.GetValue()) < 1 or int(self.von_Monat.GetValue()) > 12:
            wx.lib.dialogs.messageDialog(parent=None, message='Der Startmonat ist nicht plausibel.', title='Problem!', aStyle = wx.OK | wx.CENTRE, pos=wx.DefaultPosition).returnedString
            Fehler = 1
        try:
            int(self.bis_Jahr.GetValue())
        except:
            Fehler = 1
            wx.lib.dialogs.messageDialog(parent=None, message='Das Endejahr muss eine Zahl sein.', title='Problem!', aStyle = wx.OK | wx.CENTRE, pos=wx.DefaultPosition).returnedString
        if Fehler == 0 and int(self.bis_Jahr.GetValue()) > int(akt_Jahr):
            wx.lib.dialogs.messageDialog(parent=None, message='Das Endejahr darf nicht in der Zukunft liegen.', title='Problem!', aStyle = wx.OK | wx.CENTRE, pos=wx.DefaultPosition).returnedString
            Fehler = 1
        if Fehler == 0 and int(self.bis_Monat.GetValue()) < 1 or int(self.bis_Monat.GetValue()) > 12:
            wx.lib.dialogs.messageDialog(parent=None, message='Der Endemonat ist nicht plausibel.', title='Problem!', aStyle = wx.OK | wx.CENTRE, pos=wx.DefaultPosition).returnedString
            Fehler = 1
        if Fehler == 0 and self.von_Jahr.GetValue() + self.von_Monat.GetValue() > self.bis_Jahr.GetValue() + self.bis_Monat.GetValue():
            wx.lib.dialogs.messageDialog(parent=None, message='Das Ende liegt vor dem Start.', title='Problem!', aStyle = wx.OK | wx.CENTRE, pos=wx.DefaultPosition).returnedString
            Fehler = 1
        if Fehler == 0 and self.bis_Jahr.GetValue() + self.bis_Monat.GetValue() > akt_Jahr + akt_Monat:
            wx.lib.dialogs.messageDialog(parent=None, message='Das Ende liegt in  der Zukunft.', title='Problem!', aStyle = wx.OK | wx.CENTRE, pos=wx.DefaultPosition).returnedString
            Fehler = 1
        if Fehler == 0 and self.von_Jahr.GetValue() + self.von_Monat.GetValue() > akt_Jahr + akt_Monat:
            wx.lib.dialogs.messageDialog(parent=None, message='Der Start liegt in  der Zukunft.', title='Problem!', aStyle = wx.OK | wx.CENTRE, pos=wx.DefaultPosition).returnedString
            Fehler = 1
        if Fehler == 0:
            aktJahr = self.von_Jahr.GetValue()
            aktMon = self.von_Monat.GetValue()
            while aktJahr + aktMon <= self.bis_Jahr.GetValue() + self.bis_Monat.GetValue():
                S = 0
                while S < len(Sorte):
                    Pfad = DH_Funktionen.Verb["Datenverzeichnis"] + aktJahr + "/" + aktMon + "/" + Sorte[S] + "/"
                    try:
                        Anz_Dateien = Anz_Dateien + len(os.listdir(Pfad + "."))
                    except:
                        pass
                    S = S + 1
                akt = DH_Funktionen.plusMon(aktMon,  aktJahr)
                aktMon = akt[4:]
                aktJahr = akt[:4]
            #Jetzt kommt die eigentliche Sortierung.
            dlg = PP.PyProgress(None, -1, "Daten werden bearbeitet", "warten", agwStyle=wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME)
            dlg.SetGaugeProportion(0.1)
            dlg.SetGaugeSteps(50)
            dlg.SetGaugeBackground(wx.WHITE)
            dlg.SetFirstGradientColour(wx.WHITE)
            dlg.SetSecondGradientColour(wx.BLUE)
            S = 0
            bearbeitet = 0
            while S < len(Sorte):
                aktJahr = self.von_Jahr.GetValue()
                aktMon = self.von_Monat.GetValue()
                Pfad = DH_Funktionen.Verb["Datenverzeichnis"] + aktJahr + "/" + aktMon + "/" + Sorte[S] + "/"
                try:
                    dirList = os.listdir(Pfad + ".")
                    Text_ges = ""
                    dirList.sort()
                    for Dateiname in dirList:
                        Zeilen = []
                        aktJahr = self.von_Jahr.GetValue()
                        aktMon = self.von_Monat.GetValue()
                        Text_ges = ""
                        while aktJahr + aktMon <= self.bis_Jahr.GetValue() + self.bis_Monat.GetValue():
                            Pfad = DH_Funktionen.Verb["Datenverzeichnis"] + aktJahr + "/" + aktMon + "/" + Sorte[S] + "/"
                            try:
                                Datei = open(Pfad + Dateiname, "r")
                                Text_orig = Datei.read()
                                Text_ges = Text_ges + Text_orig
                                Datei.close()
                            except:
                                pass
                            akt = DH_Funktionen.plusMon(aktMon,  aktJahr)
                            aktMon = akt[4:]
                            aktJahr = akt[:4]
                        Zeilen = Text_ges.split("\n")
                        if len(Zeilen) > 1:
                            Zeilen.sort()
                            try:
                                #leere Zeilen entfernen
                                while Zeilen[0] == "":
                                    Zeilen = Zeilen[slice(1,len(Zeilen))]
                                    i = 0
                                fertig = 0
                                Zeilen.sort()
                            except:
                                pass
                            #Plausibilitaet der Zeitstempel kontrollieren
                            while fertig == 0 and len(Zeilen) > 0:
                                Zeile = Zeilen[0].split(",")
                                if Zeile[0] < self.von_Jahr.GetValue() + "-" + self.von_Monat.GetValue() + "-01 00:00:00":
                                    Zeilen = Zeilen[slice(1,len(Zeilen))]
                                else:
                                    fertig = 1
                            fertig = 0
                            m = DH_Funktionen.plusMon(self.bis_Monat.GetValue(),  self.bis_Jahr.GetValue())
                            mMon = m[4:]
                            mJahr = m[:4]
                            while fertig == 0 and len(Zeilen) > 1:
                                Zeile = Zeilen[len(Zeilen) - 1].split(",")
                                if Zeile[0] >= mJahr + "-" + mMon + "-01 00:00:00":
                                    Zeilen = Zeilen[slice(0, len(Zeilen) - 2)]
                                else:
                                    fertig = 1
                            #letzter Wert vor dem Zeitraum hinzu nehmen
                            akt =DH_Funktionen.minusMon(self.von_Monat.GetValue(),  self.von_Jahr.GetValue())
                            aktMon = akt[4:]
                            aktJahr = akt[:4]
                            Pfad = DH_Funktionen.Verb["Datenverzeichnis"]  + aktJahr + "/" + aktMon + "/" + Sorte[S] + "/"
                            try:
                                Datei = open(Pfad + Dateiname, "r")
                                Text_orig = Datei.read()
                                Datei.close()
                                Zeilenalt = Text_orig.split("\n")
                                if len(Zeilenalt) > 1:
                                    Zeilenalt.sort()
                                    Zeilealt = []
                                    Zeilealt.append(Zeilenalt[len(Zeilenalt) - 1])
                                    Zeilen = Zeilealt + Zeilen[slice(0,len(Zeilen))]
                            except:
                                pass
                        aktJahr = self.von_Jahr.GetValue()
                        aktMon = self.von_Monat.GetValue()
                        #doppelte Zeilen entfernen
                        i = 0
                        while i < len(Zeilen) - 3:
                            try:
                                while Zeilen[i] == Zeilen[i + 1]:
                                    Zeilen = Zeilen[slice(0, i)] +  Zeilen[slice(i + 1,len(Zeilen))]
                            except:
                                pass
                            i = i + 1
                        #Dateien neu schreiben
                        i = 0
                        Zeile = Zeilen[0].split(",")
                        letzte_Zeile = Zeilen[0]
                        while aktJahr + aktMon <= self.bis_Jahr.GetValue() + self.bis_Monat.GetValue():
                            try:
                                Pfad = DH_Funktionen.Verb["Datenverzeichnis"]  + aktJahr + "/" + aktMon + "/" + Sorte[S] + "/"
                                while DH_Funktionen.Datei_frei(Pfad + Dateiname) > 0:
                                    pass
                                DH_Funktionen.Datei_sperren(Pfad + Dateiname)
                                Datei = open(Pfad + Dateiname, "w")
                                if letzte_Zeile != Zeilen[i]:
                                    Datei.write(letzte_Zeile + "\n")
                                n = DH_Funktionen.plusMon(aktMon,  aktJahr)
                                nMon = n[4:]
                                nJahr = n[:4]
                                while Zeile[0] <= nJahr + "-" + nMon + "-01 00:00:00" and i < len(Zeilen):
                                    Datei.write(Zeilen[i] + "\n")
                                    letzte_Zeile = Zeilen[i]
                                    i = i + 1
                                    if i < len(Zeilen):
                                        Zeile = Zeilen[i].split(",")
                                    else:
                                        Zeile[0] = "Z"
                                Datei.close()
                                DH_Funktionen.Datei_entsperren(Pfad + Dateiname)
                                akt = DH_Funktionen.plusMon(aktMon,  aktJahr)
                                aktMon = akt[4:]
                                aktJahr = akt[:4]
                            except:
                                akt = DH_Funktionen.plusMon(aktMon,  aktJahr)
                                aktMon = akt[4:]
                                aktJahr = akt[:4]
                                DH_Funktionen.Datei_entsperren(Pfad + Dateiname)
                            bearbeitet = bearbeitet + 1
                            dlg.UpdatePulse(str(round(bearbeitet / Anz_Dateien * 100)) + "% berechnet")
                except:
                    pass
                S = S + 1
        dlg.Destroy()
# end of class Hauptrahmen


